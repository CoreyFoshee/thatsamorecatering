<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <meta name="description" content="<%= description %>">
    
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    
    <!-- Socket.io Client -->
    <script src="/socket.io/socket.io.js"></script>
    
    <style>
        .admin-container {
            min-height: 100vh;
            background: linear-gradient(135deg, #1a1a1a 0%, #2d1b69 100%);
            color: white;
            font-family: 'Arial', sans-serif;
        }
        
        .admin-card {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border: 2px solid rgba(255, 255, 255, 0.2);
            border-radius: 20px;
            padding: 2rem;
            margin: 1rem 0;
        }
        
        .toggle-switch {
            position: relative;
            display: inline-block;
            width: 60px;
            height: 34px;
        }
        
        .toggle-switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }
        
        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: .4s;
            border-radius: 34px;
        }
        
        .slider:before {
            position: absolute;
            content: "";
            height: 26px;
            width: 26px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }
        
        input:checked + .slider {
            background-color: #2196F3;
        }
        
        input:checked + .slider:before {
            transform: translateX(26px);
        }
        
        .form-input {
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.3);
            border-radius: 8px;
            padding: 0.75rem;
            color: white;
            width: 100%;
        }
        
        .form-input:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }
        
        .btn-primary {
            background: #3b82f6;
            color: white;
            padding: 0.75rem 1.5rem;
            border-radius: 10px;
            font-weight: bold;
            transition: all 0.3s ease;
            border: none;
            cursor: pointer;
        }
        
        .btn-primary:hover {
            background: #2563eb;
            transform: scale(1.05);
        }
        
        .btn-success {
            background: #10b981;
            color: white;
            padding: 0.75rem 1.5rem;
            border-radius: 10px;
            font-weight: bold;
            transition: all 0.3s ease;
            border: none;
            cursor: pointer;
        }
        
        .btn-success:hover {
            background: #059669;
            transform: scale(1.05);
        }
        
        .btn-danger {
            background: #ef4444;
            color: white;
            padding: 0.75rem 1.5rem;
            border-radius: 10px;
            font-weight: bold;
            transition: all 0.3s ease;
            border: none;
            cursor: pointer;
        }
        
        .btn-danger:hover {
            background: #dc2626;
            transform: scale(1.05);
        }
        
        .btn-warning {
            background: #f59e0b;
            color: white;
            padding: 0.75rem 1.5rem;
            border-radius: 10px;
            font-weight: bold;
            transition: all 0.3s ease;
            border: none;
            cursor: pointer;
        }
        
        .btn-warning:hover {
            background: #d97706;
            transform: scale(1.05);
        }
        
        .price-input {
            width: 80px;
            text-align: center;
        }
        
        .status-open {
            color: #10b981;
            font-weight: bold;
        }
        
        .status-closed {
            color: #ef4444;
            font-weight: bold;
        }
    </style>
</head>
<body>
    <div class="admin-container">
        <div class="max-w-7xl mx-auto px-4 py-8">
            <div class="text-center mb-8">
                <h1 class="text-4xl font-bold mb-4">üçï That's Amore Admin Panel</h1>
                <p class="text-xl text-gray-300">Complete Restaurant Management System</p>
            </div>
            
            <!-- Restaurant Status Control -->
            <div class="admin-card">
                <h2 class="text-2xl font-bold text-green-400 mb-6">üè™ Restaurant Status</h2>
                <div class="grid md:grid-cols-2 gap-6">
                    <div class="flex items-center justify-between p-4 bg-gray-800 rounded-lg">
                        <div>
                            <h3 class="text-lg font-semibold mb-2">Manual Override</h3>
                            <p class="text-sm text-gray-300">Force restaurant to show as closed regardless of hours</p>
                        </div>
                        <label class="toggle-switch">
                            <input type="checkbox" id="manual-closed-toggle">
                            <span class="slider"></span>
                        </label>
                    </div>
                    <div class="p-4 bg-gray-800 rounded-lg">
                        <h3 class="text-lg font-semibold mb-2">Current Status</h3>
                        <p class="text-2xl" id="current-status">Loading...</p>
                    </div>
                </div>
            </div>
            
            <!-- Hours Management -->
            <div class="admin-card">
                <h2 class="text-2xl font-bold text-blue-400 mb-6">üïí Hours Management</h2>
                <div class="grid md:grid-cols-2 gap-6 mb-6">
                    <div>
                        <h3 class="text-lg font-semibold mb-4">Header Hours</h3>
                        <textarea id="header-hours" class="form-input" rows="3" placeholder="Enter hours for header display..."></textarea>
                    </div>
                    <div>
                        <h3 class="text-lg font-semibold mb-4">Footer Hours</h3>
                        <textarea id="footer-hours" class="form-input" rows="3" placeholder="Enter hours for footer display..."></textarea>
                    </div>
                </div>
                
                <!-- Daily Business Hours -->
                <div class="mb-6">
                    <h3 class="text-lg font-semibold mb-4">Daily Business Hours</h3>
                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                        <div id="daily-hours-container">
                            <!-- Daily hours will be populated here -->
                        </div>
                    </div>
                </div>
                
                <!-- Holiday Hours -->
                <div class="mb-6">
                    <h3 class="text-lg font-semibold mb-4">Holiday Hours</h3>
                    <div id="holiday-hours-container">
                        <!-- Holiday hours will be populated here -->
                    </div>
                    <button id="add-holiday" class="btn-primary mt-3">‚ûï Add Holiday</button>
                </div>
                
                <div class="mt-4">
                    <button id="save-hours" class="btn-success">üíæ Save All Hours</button>
                </div>
            </div>
            
            <!-- Scheduled Closures -->
            <div class="admin-card">
                <h2 class="text-2xl font-bold text-yellow-400 mb-6">üìÖ Scheduled Closures</h2>
                <div class="grid md:grid-cols-2 gap-6">
                    <div>
                        <h3 class="text-lg font-semibold mb-4">Add New Closure</h3>
                        <div class="space-y-3">
                            <input type="date" id="closure-date" class="form-input">
                            <input type="text" id="closure-reason" class="form-input" placeholder="Reason for closure (optional)">
                            <button id="add-closure" class="btn-warning">‚ûï Add Closure</button>
                        </div>
                    </div>
                    <div>
                        <h3 class="text-lg font-semibold mb-4">Upcoming Closures</h3>
                        <div id="closures-list" class="space-y-2">
                            <!-- Closures will be populated here -->
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Catering Menu Pricing -->
            <div class="admin-card">
                <h2 class="text-2xl font-bold text-purple-400 mb-6">üçΩÔ∏è Catering Menu Pricing</h2>
                <div class="overflow-x-auto">
                    <table class="w-full text-sm">
                        <thead>
                            <tr class="border-b border-gray-600">
                                <th class="text-left p-2">Item</th>
                                <th class="text-center p-2">Small Price</th>
                                <th class="text-center p-2">Large Price</th>
                                <th class="text-center p-2">Single Price</th>
                                <th class="text-center p-2">Actions</th>
                            </tr>
                        </thead>
                        <tbody id="catering-menu">
                            <!-- Menu items will be populated here -->
                        </tbody>
                    </table>
                </div>
                <div class="mt-4">
                    <button id="save-catering-prices" class="btn-success">üíæ Save All Prices</button>
                    <button id="add-menu-item" class="btn-primary ml-2">‚ûï Add Item</button>
                </div>
            </div>
            
            <!-- TV Page Controls -->
            <div class="admin-card">
                <h2 class="text-2xl font-bold text-red-400 mb-6">üì∫ TV Page Controls</h2>
                <div class="grid md:grid-cols-2 gap-6">
                    <div>
                        <h3 class="text-lg font-semibold mb-4">Pies Sold Counter</h3>
                        <div class="flex items-center space-x-4">
                            <input type="number" id="pies-sold" class="form-input price-input" min="0" placeholder="0">
                            <button id="update-pies-sold" class="btn-primary">Update</button>
                        </div>
                    </div>
                    <div>
                        <h3 class="text-lg font-semibold mb-4">Vote Count Override</h3>
                        <div class="space-y-3">
                            <div class="flex items-center space-x-2">
                                <label class="text-sm">NY Style:</label>
                                <input type="number" id="ny-votes-override" class="form-input price-input" min="0" placeholder="0">
                            </div>
                            <div class="flex items-center space-x-2">
                                <label class="text-sm">Chicago Style:</label>
                                <input type="number" id="chicago-votes-override" class="form-input price-input" min="0" placeholder="0">
                            </div>
                            <button id="update-votes" class="btn-warning">Update Votes</button>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Voting Statistics -->
            <div class="admin-card">
                <h2 class="text-2xl font-bold text-indigo-400 mb-6">üìä Voting Statistics</h2>
                <div class="grid md:grid-cols-2 gap-8">
                    <div class="text-center">
                        <h3 class="text-xl font-bold text-blue-400 mb-4">üóΩ New York Style</h3>
                        <div class="text-4xl font-bold mb-2" id="ny-votes">0</div>
                        <div class="text-lg text-gray-300" id="ny-percentage">0%</div>
                    </div>
                    <div class="text-center">
                        <h3 class="text-xl font-bold text-red-400 mb-4">üèôÔ∏è Chicago Style</h3>
                        <div class="text-4xl font-bold mb-2" id="chicago-votes">0</div>
                        <div class="text-lg text-gray-300" id="chicago-percentage">0%</div>
                    </div>
                </div>
                <div class="text-center mt-6">
                    <div class="text-2xl font-bold mb-2" id="total-votes">0</div>
                    <div class="text-lg text-gray-300">Total Votes Cast</div>
                </div>
                <div class="flex justify-center mt-6 space-x-4">
                    <button id="reset-votes" class="btn-danger">üîÑ Reset All Votes</button>
                    <button id="export-data" class="btn-success">üì• Export Results</button>
                </div>
            </div>
            
            <!-- Connection Status -->
            <div class="admin-card text-center">
                <h2 class="text-2xl font-bold text-purple-400 mb-4">üì° Connection Status</h2>
                <div class="flex items-center justify-center space-x-4">
                    <div class="flex items-center space-x-2">
                        <div id="connection-status" class="w-3 h-3 rounded-full bg-red-500"></div>
                        <span id="status-text">Disconnected</span>
                    </div>
                </div>
                <div class="mt-4 text-sm text-gray-400">
                    Last update: <span id="last-update">Never</span>
                </div>
            </div>
        </div>
    </div>
    
    <script>
        // Connect to WebSocket server
        const socket = io();
        
        // DOM elements
        const manualClosedToggle = document.getElementById('manual-closed-toggle');
        const currentStatus = document.getElementById('current-status');
        const headerHours = document.getElementById('header-hours');
        const footerHours = document.getElementById('footer-hours');
        const saveHoursBtn = document.getElementById('save-hours');
        const closureDate = document.getElementById('closure-date');
        const closureReason = document.getElementById('closure-reason');
        const addClosureBtn = document.getElementById('add-closure');
        const closuresList = document.getElementById('closures-list');
        const cateringMenu = document.getElementById('catering-menu');
        const saveCateringPricesBtn = document.getElementById('save-catering-prices');
        const addMenuItemBtn = document.getElementById('add-menu-item');
        const piesSold = document.getElementById('pies-sold');
        const updatePiesSoldBtn = document.getElementById('update-pies-sold');
        const nyVotesOverride = document.getElementById('ny-votes-override');
        const chicagoVotesOverride = document.getElementById('chicago-votes-override');
        const updateVotesBtn = document.getElementById('update-votes');
        const nyVotesEl = document.getElementById('ny-votes');
        const chicagoVotesEl = document.getElementById('chicago-votes');
        const nyPercentageEl = document.getElementById('ny-percentage');
        const chicagoPercentageEl = document.getElementById('chicago-percentage');
        const totalVotesEl = document.getElementById('total-votes');
        const connectionStatusEl = document.getElementById('connection-status');
        const statusTextEl = document.getElementById('status-text');
        const lastUpdateEl = document.getElementById('last-update');
        
        // Load initial data
        loadAdminData();
        
        // Load all admin data
        async function loadAdminData() {
            try {
                const response = await fetch('/api/admin/data');
                const data = await response.json();
                if (data.success) {
                    updateDisplay(data.data);
                    updateRestaurantStatus(data.data.restaurantStatus);
                    updateHoursDisplay(data.data.hours);
                    updateClosuresDisplay(data.data.scheduledClosures);
                    updateCateringMenu(data.data.cateringMenu);
                    updateTVControls(data.data.tvControls);
                }
            } catch (error) {
                console.error('Error loading admin data:', error);
            }
        }
        
        // Update display with voting data
        function updateDisplay(data) {
            if (data.votingData) {
                nyVotesEl.textContent = data.votingData.nyVotes;
                chicagoVotesEl.textContent = data.votingData.chicagoVotes;
                totalVotesEl.textContent = data.votingData.totalVotes;
                
                const nyPercentage = data.votingData.totalVotes > 0 ? Math.round((data.votingData.nyVotes / data.votingData.totalVotes) * 100) : 0;
                const chicagoPercentage = data.votingData.totalVotes > 0 ? Math.round((data.votingData.chicagoVotes / data.votingData.totalVotes) * 100) : 0;
                
                nyPercentageEl.textContent = nyPercentage + '%';
                chicagoPercentageEl.textContent = chicagoPercentage + '%';
            }
        }
        
        // Update restaurant status display
        function updateRestaurantStatus(status) {
            if (status.manualClosed) {
                currentStatus.textContent = 'CLOSED (Manual Override)';
                currentStatus.className = 'text-2xl status-closed';
                manualClosedToggle.checked = true;
            } else {
                currentStatus.textContent = 'OPEN (Based on Hours)';
                currentStatus.className = 'text-2xl status-open';
                manualClosedToggle.checked = false;
            }
        }
        
        // Update hours display
        function updateHoursDisplay(hours) {
            headerHours.value = hours.header || '';
            footerHours.value = hours.footer || '';
            updateDailyHoursDisplay(hours.businessHours || []);
            updateHolidayHoursDisplay(hours.holidayHours || []);
        }
        
        // Update daily hours display
        function updateDailyHoursDisplay(businessHours) {
            const container = document.getElementById('daily-hours-container');
            container.innerHTML = '';
            
            const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
            
            days.forEach((day, index) => {
                const dayData = businessHours[index] || { day, hours: 'Closed', open: false };
                const dayDiv = document.createElement('div');
                dayDiv.className = 'p-4 bg-gray-800 rounded-lg';
                dayDiv.innerHTML = `
                    <h4 class="font-semibold text-accent mb-2">${day}</h4>
                    <div class="space-y-2">
                        <div class="flex items-center space-x-2">
                            <input type="checkbox" id="open-${index}" ${dayData.open ? 'checked' : ''} class="w-4 h-4">
                            <label for="open-${index}" class="text-sm">Open</label>
                        </div>
                        <input type="text" id="hours-${index}" value="${dayData.hours}" 
                               class="form-input text-sm" placeholder="e.g., 11:00 AM - 8:00 PM">
                    </div>
                `;
                container.appendChild(dayDiv);
            });
        }
        
        // Update holiday hours display
        function updateHolidayHoursDisplay(holidayHours) {
            const container = document.getElementById('holiday-hours-container');
            container.innerHTML = '';
            
            holidayHours.forEach((holiday, index) => {
                const holidayDiv = document.createElement('div');
                holidayDiv.className = 'p-4 bg-gray-800 rounded-lg mb-3';
                holidayDiv.innerHTML = `
                    <div class="grid grid-cols-1 md:grid-cols-4 gap-3">
                        <input type="text" value="${holiday.name}" placeholder="Holiday Name" 
                               class="form-input text-sm" data-field="name" data-index="${index}">
                        <input type="number" value="${holiday.month}" placeholder="Month (1-12)" min="1" max="12"
                               class="form-input text-sm" data-field="month" data-index="${index}">
                        <input type="number" value="${holiday.day}" placeholder="Day (1-31)" min="1" max="31"
                               class="form-input text-sm" data-field="day" data-index="${index}">
                        <div class="flex items-center space-x-2">
                            <input type="text" value="${holiday.hours}" placeholder="Hours" 
                                   class="form-input text-sm" data-field="hours" data-index="${index}">
                            <input type="checkbox" ${holiday.open ? 'checked' : ''} 
                                   class="w-4 h-4" data-field="open" data-index="${index}">
                            <label class="text-sm">Open</label>
                        </div>
                    </div>
                    <div class="flex justify-between items-center mt-3">
                        <div class="flex items-center space-x-2">
                            <input type="checkbox" ${holiday.isCalculated ? 'checked' : ''} 
                                   class="w-4 h-4" data-field="isCalculated" data-index="${index}">
                            <label class="text-sm">Calculated Date (Easter/Thanksgiving)</label>
                        </div>
                        <button class="btn-danger text-sm" onclick="deleteHoliday(${index})">üóëÔ∏è</button>
                    </div>
                `;
                container.appendChild(holidayDiv);
            });
        }
        
        // Update closures display
        function updateClosuresDisplay(closures) {
            closuresList.innerHTML = '';
            closures.forEach(closure => {
                const closureDiv = document.createElement('div');
                closureDiv.className = 'flex justify-between items-center p-3 bg-gray-800 rounded-lg';
                closureDiv.innerHTML = `
                    <div>
                        <span class="font-semibold">${new Date(closure.date).toLocaleDateString()}</span>
                        ${closure.reason ? `<span class="text-gray-300 ml-2">- ${closure.reason}</span>` : ''}
                    </div>
                    <button class="btn-danger text-sm" onclick="deleteClosure('${closure.date}')">üóëÔ∏è</button>
                `;
                closuresList.appendChild(closureDiv);
            });
        }
        
        // Update catering menu display
        function updateCateringMenu(menu) {
            cateringMenu.innerHTML = '';
            menu.forEach(item => {
                const row = document.createElement('tr');
                row.className = 'border-b border-gray-600';
                row.innerHTML = `
                    <td class="p-2">
                        <input type="text" class="form-input" value="${item.name}" data-field="name" data-id="${item.id}">
                    </td>
                    <td class="p-2 text-center">
                        <input type="number" class="form-input price-input" value="${item.smallPrice || ''}" data-field="smallPrice" data-id="${item.id}" step="0.01" min="0">
                    </td>
                    <td class="p-2 text-center">
                        <input type="number" class="form-input price-input" value="${item.largePrice || ''}" data-field="largePrice" data-id="${item.id}" step="0.01" min="0">
                    </td>
                    <td class="p-2 text-center">
                        <input type="number" class="form-input price-input" value="${item.singlePrice || ''}" data-field="singlePrice" data-id="${item.id}" step="0.01" min="0">
                    </td>
                    <td class="p-2 text-center">
                        <button class="btn-danger text-sm" onclick="deleteMenuItem('${item.id}')">üóëÔ∏è</button>
                    </td>
                `;
                cateringMenu.appendChild(row);
            });
        }
        
        // Update TV controls display
        function updateTVControls(controls) {
            piesSold.value = controls.piesSold || 0;
            nyVotesOverride.value = controls.nyVotes || 0;
            chicagoVotesOverride.value = controls.chicagoVotes || 0;
        }
        
        // Update connection status
        function updateConnectionStatus(connected) {
            if (connected) {
                connectionStatusEl.className = 'w-3 h-3 rounded-full bg-green-500';
                statusTextEl.textContent = 'Connected';
            } else {
                connectionStatusEl.className = 'w-3 h-3 rounded-full bg-red-500';
                statusTextEl.textContent = 'Disconnected';
            }
        }
        
        // Event Listeners
        manualClosedToggle.addEventListener('change', async () => {
            try {
                const response = await fetch('/api/admin/restaurant-status', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ manualClosed: manualClosedToggle.checked })
                });
                
                const result = await response.json();
                if (result.success) {
                    updateRestaurantStatus(result.data);
                }
            } catch (error) {
                console.error('Error updating restaurant status:', error);
            }
        });
        
        saveHoursBtn.addEventListener('click', async () => {
            try {
                // Collect daily business hours
                const businessHours = [];
                for (let i = 0; i < 7; i++) {
                    const openCheckbox = document.getElementById(`open-${i}`);
                    const hoursInput = document.getElementById(`hours-${i}`);
                    businessHours.push({
                        day: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'][i],
                        hours: hoursInput.value,
                        open: openCheckbox.checked
                    });
                }
                
                // Collect holiday hours
                const holidayHours = [];
                const holidayContainers = document.querySelectorAll('#holiday-hours-container > div');
                holidayContainers.forEach(container => {
                    const inputs = container.querySelectorAll('input[data-field]');
                    const holiday = {};
                    inputs.forEach(input => {
                        const field = input.dataset.field;
                        if (input.type === 'checkbox') {
                            holiday[field] = input.checked;
                        } else {
                            holiday[field] = field === 'month' || field === 'day' ? parseInt(input.value) : input.value;
                        }
                    });
                    if (holiday.name && holiday.month && holiday.day && holiday.hours !== undefined) {
                        holidayHours.push(holiday);
                    }
                });
                
                const response = await fetch('/api/admin/hours', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        header: headerHours.value,
                        footer: footerHours.value,
                        businessHours,
                        holidayHours
                    })
                });
                
                const result = await response.json();
                if (result.success) {
                    alert('Hours saved successfully!');
                }
            } catch (error) {
                console.error('Error saving hours:', error);
            }
        });
        
        addClosureBtn.addEventListener('click', async () => {
            if (!closureDate.value) {
                alert('Please select a date');
                return;
            }
            
            try {
                const response = await fetch('/api/admin/closures', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        date: closureDate.value,
                        reason: closureReason.value
                    })
                });
                
                const result = await response.json();
                if (result.success) {
                    updateClosuresDisplay(result.data);
                    closureDate.value = '';
                    closureReason.value = '';
                    alert('Closure added successfully!');
                }
            } catch (error) {
                console.error('Error adding closure:', error);
            }
        });
        
        saveCateringPricesBtn.addEventListener('click', async () => {
            const menuData = [];
            const rows = cateringMenu.querySelectorAll('tr');
            
            rows.forEach(row => {
                const inputs = row.querySelectorAll('input');
                if (inputs.length > 0) {
                    const item = {
                        id: inputs[0].dataset.id,
                        name: inputs[0].value,
                        smallPrice: parseFloat(inputs[1].value) || null,
                        largePrice: parseFloat(inputs[2].value) || null,
                        singlePrice: parseFloat(inputs[3].value) || null
                    };
                    menuData.push(item);
                }
            });
            
            try {
                const response = await fetch('/api/admin/catering-menu', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ menu: menuData })
                });
                
                const result = await response.json();
                if (result.success) {
                    alert('Catering menu prices saved successfully!');
                }
            } catch (error) {
                console.error('Error saving catering menu:', error);
            }
        });
        
        addMenuItemBtn.addEventListener('click', () => {
            const row = document.createElement('tr');
            row.className = 'border-b border-gray-600';
            const newId = 'new_' + Date.now();
            row.innerHTML = `
                <td class="p-2">
                    <input type="text" class="form-input" placeholder="Item name" data-field="name" data-id="${newId}">
                </td>
                <td class="p-2 text-center">
                    <input type="number" class="form-input price-input" placeholder="0.00" data-field="smallPrice" data-id="${newId}" step="0.01" min="0">
                </td>
                <td class="p-2 text-center">
                    <input type="number" class="form-input price-input" placeholder="0.00" data-field="largePrice" data-id="${newId}" step="0.01" min="0">
                </td>
                <td class="p-2 text-center">
                    <input type="number" class="form-input price-input" placeholder="0.00" data-field="singlePrice" data-id="${newId}" step="0.01" min="0">
                </td>
                <td class="p-2 text-center">
                    <button class="btn-danger text-sm" onclick="this.closest('tr').remove()">üóëÔ∏è</button>
                </td>
            `;
            cateringMenu.appendChild(row);
        });
        
        updatePiesSoldBtn.addEventListener('click', async () => {
            try {
                const response = await fetch('/api/admin/tv-controls', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ piesSold: parseInt(piesSold.value) || 0 })
                });
                
                const result = await response.json();
                if (result.success) {
                    alert('Pies sold updated successfully!');
                }
            } catch (error) {
                console.error('Error updating pies sold:', error);
            }
        });
        
        updateVotesBtn.addEventListener('click', async () => {
            try {
                const response = await fetch('/api/admin/tv-controls', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        nyVotes: parseInt(nyVotesOverride.value) || 0,
                        chicagoVotes: parseInt(chicagoVotesOverride.value) || 0
                    })
                });
                
                const result = await response.json();
                if (result.success) {
                    alert('Vote counts updated successfully!');
                    updateDisplay(result.data);
                }
            } catch (error) {
                console.error('Error updating votes:', error);
            }
        });
        
        // Socket event handlers
        socket.on('connect', () => {
            console.log('Connected to server');
            updateConnectionStatus(true);
        });
        
        socket.on('disconnect', () => {
            console.log('Disconnected from server');
            updateConnectionStatus(false);
        });
        
        socket.on('voting-update', (data) => {
            updateDisplay({ votingData: data });
            lastUpdateEl.textContent = new Date().toLocaleTimeString();
        });
        
        // Admin actions
        document.getElementById('reset-votes').addEventListener('click', async () => {
            if (confirm('Are you sure you want to reset all votes? This action cannot be undone.')) {
                try {
                    const response = await fetch('/api/admin/reset-votes', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' }
                    });
                    
                    const result = await response.json();
                    if (result.success) {
                        alert('Votes reset successfully!');
                        updateDisplay({ votingData: result.data });
                    } else {
                        alert('Error resetting votes: ' + result.message);
                    }
                } catch (error) {
                    console.error('Error resetting votes:', error);
                    alert('Error resetting votes. Please try again.');
                }
            }
        });
        
        document.getElementById('export-data').addEventListener('click', () => {
            const data = {
                nyVotes: parseInt(nyVotesEl.textContent),
                chicagoVotes: parseInt(chicagoVotesEl.textContent),
                totalVotes: parseInt(totalVotesEl.textContent),
                timestamp: new Date().toISOString()
            };
            
            const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `pizza-voting-results-${new Date().toISOString().split('T')[0]}.json`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
            
            alert('Voting results exported successfully!');
        });
        
        // Global functions for delete operations
        window.deleteClosure = async function(date) {
            if (confirm('Are you sure you want to delete this closure?')) {
                try {
                    const response = await fetch(`/api/admin/closures/${date}`, {
                        method: 'DELETE'
                    });
                    
                    const result = await response.json();
                    if (result.success) {
                        updateClosuresDisplay(result.data);
                        alert('Closure deleted successfully!');
                    }
                } catch (error) {
                    console.error('Error deleting closure:', error);
                }
            }
        };
        
        window.deleteMenuItem = async function(id) {
            if (confirm('Are you sure you want to delete this menu item?')) {
                try {
                    const response = await fetch(`/api/admin/catering-menu/${id}`, {
                        method: 'DELETE'
                    });
                    
                    const result = await response.json();
                    if (result.success) {
                        updateCateringMenu(result.data);
                        alert('Menu item deleted successfully!');
                    }
                } catch (error) {
                    console.error('Error deleting menu item:', error);
                }
            }
        };
        
        window.deleteHoliday = function(index) {
            if (confirm('Are you sure you want to delete this holiday?')) {
                const container = document.getElementById('holiday-hours-container');
                const holidayDiv = container.children[index];
                if (holidayDiv) {
                    holidayDiv.remove();
                }
            }
        };
    </script>
</body>
</html>
